{
  "type": "module",
  "appVersion": "1.19.3",
  "properties": {
    "meta": {
      "showingComment": true,
      "comment": {
        "markdown": {
          "text": {
            "text": "",
            "syntax": "markdown",
            "size": {
              "width": "100%",
              "height": "100%"
            }
          },
          "size": {
            "width": null,
            "height": 160
          },
          "view": "edit"
        },
        "editor": {
          "collapsed": true
        }
      },
      "role": "normal"
    },
    "variables": {
      "variables": {
        "list": [
          {
            "name": "hemis",
            "type": "any",
            "value": {
              "widgetType": "expression/string",
              "widgetData": {
                "interpolation": true,
                "text": "U"
              },
              "code": "'U'"
            }
          },
          {
            "name": "utm2ll",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": "# converts UTM coordinates into lat/long values\n(easting, northing, zone, hemis) -> \n  let {\n    one_radian: 180/math.pi;\n    x: easting - 500000;\n    y: if hemis == 'S' then northing-1000000 else northing;\n    cm: (zone - 1) * 6 - 180 + 3;\n    a: 6378137.0;\n    f: 1 / 298.257223563;\n    e2: 1 - (1 - f) * (1 - f);\n    K0: 0.9996;\n    E2: e2 * e2;\n    E3: E2 * e2;\n    E_P2: e2 / (1.0 - e2);\n    _E: (1 - math.sqrt(1 - e2)) / (1 + math.sqrt(1 - e2));\n    _E2: _E * _E;\n    _E3: _E2 * _E;\n    _E4: _E3 * _E;\n    _E5: _E4 * _E;\n    M1: (1 - e2 / 4 - 3 * E2 / 64 - 5 * E3 / 256);\n    P2: (3 / 2 * _E - 27 / 32 * _E3 + 269 / 512 * _E5);\n    P3: (21 / 16 * _E2 - 55 / 32 * _E4);\n    P4: (151 / 96 * _E3 - 417 / 128 * _E5);\n    P5: (1097 / 512 * _E4);\n    m: y / K0;\n    mu: m / (a * M1);\n    p_rad: (mu + P2 * math.sin(2 * mu) + P3 * math.sin(4 * mu) + P4 * math.sin(6 * mu) + P5 * math.sin(8 * mu));\n    p_sin: math.sin(p_rad);\n    p_sin2: p_sin * p_sin;\n    p_cos: math.cos(p_rad);\n    p_tan: p_sin / p_cos;\n    p_tan2: p_tan * p_tan;\n    p_tan4: p_tan2 * p_tan2;\n    ep_sin: 1 - e2 * p_sin2;\n    ep_sin_sqrt: math.sqrt(1 - e2 * p_sin2);\n    n: a / ep_sin_sqrt;\n    r: (1 - e2) / ep_sin;\n    c: _E * p_cos ** 2;\n    c2: c * c;\n    d: x / (n * K0);\n    d2: d * d;\n    d3: d2 * d;\n    d4: d3 * d;\n    d5: d4 * d;\n    d6: d5 * d;\n    lat: (p_rad - (p_tan / r) * (d2 / 2 - d4 / 24 * (5 + 3 * p_tan2 + 10 * c - 4 * c2 - 9 * E_P2 )) + d6 / 720 * (61 + 90 * p_tan2 + 298 * c + 45 * p_tan4 - 252 * E_P2 - 3 * c2));\n    lon: (d - d3 / 6 * (1 + 2 * p_tan2 + c) + d5 / 120 * (5 - 2 * c + 28 * p_tan2 - 3 * c2 + 8 * E_P2 + 24 * p_tan4)) / p_cos;\n  }\n  {\n    :latitude_decimal lat * one_radian,\n    :longitude_decimal lon * one_radian + cm,\n  }",
                "size": {
                  "width": 0,
                  "height": 768
                },
                "syntax": "tweakflow"
              },
              "code": "# converts UTM coordinates into lat/long values\n(easting, northing, zone, hemis) -> \n  let {\n    one_radian: 180/math.pi;\n    x: easting - 500000;\n    y: if hemis == 'S' then northing-1000000 else northing;\n    cm: (zone - 1) * 6 - 180 + 3;\n    a: 6378137.0;\n    f: 1 / 298.257223563;\n    e2: 1 - (1 - f) * (1 - f);\n    K0: 0.9996;\n    E2: e2 * e2;\n    E3: E2 * e2;\n    E_P2: e2 / (1.0 - e2);\n    _E: (1 - math.sqrt(1 - e2)) / (1 + math.sqrt(1 - e2));\n    _E2: _E * _E;\n    _E3: _E2 * _E;\n    _E4: _E3 * _E;\n    _E5: _E4 * _E;\n    M1: (1 - e2 / 4 - 3 * E2 / 64 - 5 * E3 / 256);\n    P2: (3 / 2 * _E - 27 / 32 * _E3 + 269 / 512 * _E5);\n    P3: (21 / 16 * _E2 - 55 / 32 * _E4);\n    P4: (151 / 96 * _E3 - 417 / 128 * _E5);\n    P5: (1097 / 512 * _E4);\n    m: y / K0;\n    mu: m / (a * M1);\n    p_rad: (mu + P2 * math.sin(2 * mu) + P3 * math.sin(4 * mu) + P4 * math.sin(6 * mu) + P5 * math.sin(8 * mu));\n    p_sin: math.sin(p_rad);\n    p_sin2: p_sin * p_sin;\n    p_cos: math.cos(p_rad);\n    p_tan: p_sin / p_cos;\n    p_tan2: p_tan * p_tan;\n    p_tan4: p_tan2 * p_tan2;\n    ep_sin: 1 - e2 * p_sin2;\n    ep_sin_sqrt: math.sqrt(1 - e2 * p_sin2);\n    n: a / ep_sin_sqrt;\n    r: (1 - e2) / ep_sin;\n    c: _E * p_cos ** 2;\n    c2: c * c;\n    d: x / (n * K0);\n    d2: d * d;\n    d3: d2 * d;\n    d4: d3 * d;\n    d5: d4 * d;\n    d6: d5 * d;\n    lat: (p_rad - (p_tan / r) * (d2 / 2 - d4 / 24 * (5 + 3 * p_tan2 + 10 * c - 4 * c2 - 9 * E_P2 )) + d6 / 720 * (61 + 90 * p_tan2 + 298 * c + 45 * p_tan4 - 252 * E_P2 - 3 * c2));\n    lon: (d - d3 / 6 * (1 + 2 * p_tan2 + c) + d5 / 120 * (5 - 2 * c + 28 * p_tan2 - 3 * c2 + 8 * E_P2 + 24 * p_tan4)) / p_cos;\n  }\n  {\n    :latitude_decimal lat * one_radian,\n    :longitude_decimal lon * one_radian + cm,\n  }\n"
            }
          },
          {
            "name": "decdeg2deg",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": "# convert degrees in decimal format to dict containing degrees, minutes and seconds\n(lat_degrees_decimal, long_degrees_decimal) ->\n  let {\n    lat_minutes: (lat_degrees_decimal - lat_degrees_decimal as long) * 60;\n    lat_seconds: (lat_minutes - lat_minutes as long) * 60;\n    long_minutes: (long_degrees_decimal - long_degrees_decimal as long) * 60;\n    long_seconds: (long_minutes - long_minutes as long) * 60;\n  }\n  {\n    :latitude {\n        :degrees lat_degrees_decimal as long,\n        :minutes lat_minutes as long,\n        :seconds decimals.with_scale(lat_seconds,1) as double\n    },\n    :longitude {\n        :degrees long_degrees_decimal as long,\n        :minutes long_minutes as long,\n        :seconds decimals.with_scale(long_seconds,1) as double\n    }\n\n  } ",
                "size": {
                  "width": 0,
                  "height": 239
                },
                "syntax": "tweakflow"
              },
              "code": "# convert degrees in decimal format to dict containing degrees, minutes and seconds\n(lat_degrees_decimal, long_degrees_decimal) ->\n  let {\n    lat_minutes: (lat_degrees_decimal - lat_degrees_decimal as long) * 60;\n    lat_seconds: (lat_minutes - lat_minutes as long) * 60;\n    long_minutes: (long_degrees_decimal - long_degrees_decimal as long) * 60;\n    long_seconds: (long_minutes - long_minutes as long) * 60;\n  }\n  {\n    :latitude {\n        :degrees lat_degrees_decimal as long,\n        :minutes lat_minutes as long,\n        :seconds decimals.with_scale(lat_seconds,1) as double\n    },\n    :longitude {\n        :degrees long_degrees_decimal as long,\n        :minutes long_minutes as long,\n        :seconds decimals.with_scale(long_seconds,1) as double\n    }\n\n  }\n"
            }
          }
        ]
      },
      "editor": {
        "collapsed": false
      }
    },
    "services": {
      "services": {
        "list": []
      },
      "editor": {
        "collapsed": false
      }
    },
    "imports": {
      "code": "# import the standard library\nimport math, decimals from 'std';\n",
      "size": {
        "width": 0,
        "height": 74
      },
      "editor": {
        "collapsed": false
      }
    },
    "editor": {
      "showVariables": true,
      "showServices": true,
      "dialogWidth": "wide"
    },
    "model": {}
  }
}